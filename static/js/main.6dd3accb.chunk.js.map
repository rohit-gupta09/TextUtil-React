{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newText","toUpperCase","newtext","toLowerCase","charAt","slice","copyTextarea","document","querySelector","focus","select","successful","execCommand","alert","err","split","length","Alert","role","msg","App","setmode","setAlert","showalert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oMAIe,SAASA,EAAOC,GAC7B,OACE,8BACE,qBACEC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MADtE,SAGE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SACGH,EAAMI,QAET,wBACEH,UAAU,iBACVI,KAAK,SACL,iBAAe,WACf,iBAAe,0BACf,gBAAc,yBACd,gBAAc,QACd,aAAW,oBAPb,SASE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,qBAAIL,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,oBAIF,oBAAIF,UAAU,gBAiBhB,sBAAKA,UAAS,sCAA8C,UAAbD,EAAME,KAAe,OAAO,SAA3E,UACE,uBACED,UAAU,mBACVM,QAASP,EAAMQ,WACfH,KAAK,WACLC,GAAG,2BAEL,uBAAOL,UAAU,mBAAmBQ,QAAQ,yBAA5C,0CCtDC,SAASC,EAASV,GAC/B,IAwCA,EAAwBW,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,OACE,qCACE,sBAAKZ,UAAU,YAAYa,MAAO,CAACC,MAAmB,SAAbf,EAAME,KAAc,QAAQ,SAArE,UACE,6BAAKF,EAAMgB,UACX,qBAAKf,UAAU,OAAf,SACE,0BACEA,UAAU,eACVgB,MAAOL,EACPE,MAAO,CAACI,gBAA6B,SAAblB,EAAME,KAAc,OAAO,QAAQa,MAAmB,SAAbf,EAAME,KAAc,QAAQ,SAC7FiB,SApDa,SAACC,GAEtBP,EAAQO,EAAMC,OAAOJ,QAmDbX,GAAG,QACHgB,KAAK,QAGT,wBAAQrB,UAAU,uBAAuBM,QAvBzB,WAEpB,IAAIgB,EAAUX,EAAKY,cACnBX,EAAQU,IAoBJ,kCAGA,wBAAQtB,UAAU,uBAAuBM,QAvDtB,WACvB,IAAIkB,EAAUb,EAAKc,cACnBb,EAAQY,IAqDJ,kCAGA,wBAAQxB,UAAU,uBAAuBM,QArDtB,WAEvBM,EADc,KAoDV,wBAGA,wBACEZ,UAAU,uBACVM,QAxCsB,WAC5B,IACIkB,EADYb,EAAKe,OAAO,GACJH,cAAgBZ,EAAKgB,MAAM,GACnDf,EAAQY,IAmCJ,wBAMA,wBAAQxB,UAAU,uBAAuBM,QAzDvB,WACtB,IAAIsB,EAAeC,SAASC,cAAc,UAC1CF,EAAaG,QACbH,EAAaI,SACb,IACE,IAAIC,EAAaJ,SAASK,YAAY,QAEtCC,MAAM,0BADIF,EAAa,aAAe,iBAEtC,MAAOG,GACPD,MAAM,oBAgDJ,qBAIF,sBAAKnC,UAAU,iBAAiBa,MAAO,CAACC,MAAmB,SAAbf,EAAME,KAAc,QAAQ,SAA1E,UACE,mDACA,8BACGU,EAAK0B,MAAM,KAAKC,OADnB,cACsC3B,EAAK2B,OAD3C,gBAGA,8BAAI,KAAQ3B,EAAK0B,MAAM,KAAKC,OAA5B,mBACA,yCACA,4BAAI3B,EAAK2B,OAAO,EAAE3B,EAAK,6CCzEhB4B,MAXf,SAAexC,GACX,OAEOA,EAAMoC,OAAS,sBAAKnC,UAAS,sBAAiBD,EAAMoC,MAAM/B,KAA7B,gCAAiEoC,KAAK,QAApF,UACV,iCAASzC,EAAMoC,MAAM/B,OADX,KAC4BL,EAAMoC,MAAMM,IAClD,wBAAQrC,KAAK,SAASJ,UAAU,YAAY,kBAAgB,QAAQ,aAAW,cCmDhF0C,MAjDf,WACE,MAAwBhC,mBAAS,SAAjC,mBAAOT,EAAP,KAAa0C,EAAb,KAEA,EAA0BjC,mBAAS,MAAnC,mBAAOyB,EAAP,KAAcS,EAAd,KAEMC,EAAY,SAACC,EAAS1C,GAC1BwC,EAAS,CACPH,IAAKK,EACL1C,KAAMA,IAER2C,YAAW,WACTH,EAAS,QACR,MAgBL,OACE,qCAEI,cAAC9C,EAAD,CAAQK,MAAM,YAAYF,KAAMA,EAAMM,WAhBzB,WACJ,UAATN,GACF0C,EAAQ,QACRd,SAASmB,KAAKnC,MAAMI,gBAAkB,OACtC4B,EAAU,6BAA8B,aAGxCF,EAAQ,SACRd,SAASmB,KAAKnC,MAAMI,gBAAkB,QACtC4B,EAAU,8BAA+B,eAQvC,cAAC,EAAD,CAAOV,MAAOA,IACd,qBAAKnC,UAAU,iBAAf,SAOM,cAACS,EAAD,CAAUM,QAAQ,iBAAiBd,KAAMA,UCrCxCgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/B,SAASgC,eAAe,SAM1BZ,K","file":"static/js/main.6dd3accb.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <Link className=\"nav-link\" to=\"/about\">\r\n                  About\r\n                </Link> */}\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input\r\n                className=\"form-check-input\"\r\n                onClick={props.toggleMode}\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n              />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">\r\n                Enable DarkMode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On change\")\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleLowerClick = () => {\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newtext = \"\";\r\n    setText(newtext);\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    let copyTextarea = document.querySelector(\"#mybox\");\r\n    copyTextarea.focus();\r\n    copyTextarea.select();\r\n    try {\r\n      let successful = document.execCommand(\"copy\");\r\n      let msg = successful ? \"successful\" : \"unsuccessful\";\r\n      alert(\"Copy text command was \" + msg);\r\n    } catch (err) {\r\n      alert(\"Unable to copy\");\r\n    }\r\n  };\r\n\r\n  const handleCapitalizeClick = () => {\r\n    let firstchar = text.charAt(0);\r\n    let newtext = firstchar.toUpperCase() + text.slice(1);\r\n    setText(newtext);\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"You have clicked\"+text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\"); // hook in react and we have given the default text in brackets\r\n  //   text=\"new Text\";// wrong way to change the text\r\n  //   setText(\"new text\")// Correct way to change the text\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}}\r\n            onChange={handleOnChange}\r\n            id=\"mybox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to UpperCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLowerClick}>\r\n          Convert to LowerCase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2\"\r\n          onClick={handleCapitalizeClick}\r\n        >\r\n          Capitalize\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleCopyClick}>\r\n          Copy\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} charcters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        \r\n           props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React, { useState } from \"react\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\"); // whther the darkmode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  const showalert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showalert(\"Dark mode has been enabled\", \"success\");\n      // document.body.style.color='white'\n    } else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light mode has been enabled\", \"success\");\n      // document.body.style.color='black'\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* yha bhi de sakta hu me heading but abhi hum heading ki form me de rahe h */}\n          {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n              <TextForm heading=\"Enter The text\" mode={mode} />\n            {/* </Route>\n          </Switch> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}